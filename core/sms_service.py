# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ SMS.ru
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: https://sms.ru/api
"""
import requests
import logging
from django.conf import settings

logger = logging.getLogger(__name__)


class SMSService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –°–ú–° —á–µ—Ä–µ–∑ SMS.ru"""
    
    def __init__(self):
        self.api_id = getattr(settings, 'SMS_RU_API_KEY', None)
        self.api_url = 'https://sms.ru/sms/send'
        self.enabled = getattr(settings, 'SMS_ENABLED', False)
    
    def send_sms(self, phone, message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–ú–° –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.
        
        Args:
            phone (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.enabled:
            logger.info(f'üì± SMS –æ—Ç–∫–ª—é—á–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {phone}: {message}')
            print(f'\nüì± SMS (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {phone}\n{message}\n')
            return True
        
        if not self.api_id:
            logger.error('SMS_RU_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
            print(f'\n‚ö†Ô∏è SMS_RU_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {phone}:\n{message}\n')
            return False
        
        try:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_phone = ''.join(filter(str.isdigit, phone))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API SMS.ru
            params = {
                'api_id': self.api_id,
                'to': clean_phone,
                'msg': message,
                'json': 1  # –û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            }
            
            response = requests.get(self.api_url, params=params, timeout=10)
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if data.get('status') == 'OK':
                logger.info(f'‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}')
                return True
            else:
                error_code = data.get('status_code')
                error_text = data.get('status_text', 'Unknown error')
                logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {error_code} - {error_text}')
                return False
                
        except Exception as e:
            logger.error(f'‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {e}')
            print(f'\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –Ω–∞ {phone}: {e}\n{message}\n')
            return False
    
    def send_verification_code(self, phone, code):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω."""
        message = f'LootLink: –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç.'
        return self.send_sms(phone, message)
    
    def send_password_reset_code(self, phone, code, username):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω."""
        message = f'LootLink: –ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è ({username}): {code}\n\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç.'
        return self.send_sms(phone, message)


# Singleton instance
sms_service = SMSService()


def send_sms(phone, message):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –°–ú–°."""
    return sms_service.send_sms(phone, message)


def send_verification_sms(phone, code):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    return sms_service.send_verification_code(phone, code)


def send_password_reset_sms(phone, code, username):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è."""
    return sms_service.send_password_reset_code(phone, code, username)

