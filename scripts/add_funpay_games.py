#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ Funpay
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç slug, –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏–∫–æ–Ω–∫–∏
"""
import os
import sys
import django
from django.utils.text import slugify

# Setup Django
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from listings.models import Game, Category
from django.db import transaction


# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∏–∫–æ–Ω–∫–∏ Bootstrap Icons
CATEGORY_ICONS = {
    '–∞–∫–∫–∞—É–Ω—Ç—ã': 'bi-person-circle',
    '–∫–ª—é—á–∏': 'bi-key-fill',
    '–¥–æ–Ω–∞—Ç': 'bi-gem',
    '—É—Å–ª—É–≥–∏': 'bi-tools',
    '–ø—Ä–µ–¥–º–µ—Ç—ã': 'bi-box-seam',
    '–±—É—Å—Ç': 'bi-graph-up-arrow',
    '–æ–±—É—á–µ–Ω–∏–µ': 'bi-book',
    '–ø—Ä–æ–∫–∞—á–∫–∞': 'bi-arrow-up-circle',
    '–∑–æ–ª–æ—Ç–æ': 'bi-coin',
    '—Å–µ—Ä–µ–±—Ä–æ': 'bi-coin',
    '–º–æ–Ω–µ—Ç—ã': 'bi-coin',
    '–∞–ª–º–∞–∑—ã': 'bi-gem',
    '–≥–µ–º—ã': 'bi-gem',
    '–∫—Ä–∏—Å—Ç–∞–ª–ª—ã': 'bi-gem',
    '—Ä—É–±–ª–∏': 'bi-currency-ruble',
    '–¥–æ–ª–ª–∞—Ä—ã': 'bi-currency-dollar',
    '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ': 'bi-wallet2',
    '–ø–æ–¥–ø–∏—Å–∫–∞': 'bi-star-fill',
    'premium': 'bi-star-fill',
    'pass': 'bi-award',
    '–ø—Ä–æ–ø—É—Å–∫': 'bi-ticket-perforated',
    '—Ä–µ–π–¥—ã': 'bi-people-fill',
    '–ø–æ–¥–∑–µ–º–µ–ª—å—è': 'bi-door-closed',
    '–∫–≤–µ—Å—Ç—ã': 'bi-journal-text',
    '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è': 'bi-trophy',
    'twitch': 'bi-twitch',
    'prime': 'bi-star',
    'game pass': 'bi-xbox',
    '–æ—Ñ—Ñ–ª–∞–π–Ω': 'bi-shield-check',
    '–∫–µ–π—Å—ã': 'bi-box',
    '—Å–∫–∏–Ω—ã': 'bi-palette',
    '—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞': 'bi-shield-shaded',
    '–ø—Ä–æ—á–µ–µ': 'bi-three-dots',
}


def get_icon_for_category(category_name):
    """–ü–æ–¥–±–∏—Ä–∞–µ—Ç –∏–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    name_lower = category_name.lower()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for keyword, icon in CATEGORY_ICONS.items():
        if keyword in name_lower:
            return icon
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'bi-tag'


# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞)
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
GAMES_LIST_FILE = os.path.join(SCRIPT_DIR, 'funpay_games_list.txt')

# –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
if os.path.exists(GAMES_LIST_FILE):
    with open(GAMES_LIST_FILE, 'r', encoding='utf-8') as f:
        GAMES_DATA = f.read()
else:
    print(f"‚ö†Ô∏è  –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    GAMES_DATA = ""  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∏–∂–µ


def parse_games_list(text):
    """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    games = []
    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±—É–∫–≤ (A, B, C –∏ —Ç.–¥.)
        if len(line) <= 3 and (line.isalpha() or line.isdigit() or line in ['–ê', '–í', '–ì', '–î', '–ö', '–õ', '–ú', '–û', '–ü', '–†', '–¢', '–®', '0', '2', '7', '8']):
            i += 1
            continue
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        game_name = line
        i += 1
        
        # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if i < len(lines):
            next_line = lines[i]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–∫–≤—ã –∏ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
            if len(next_line) > 3 and not (len(next_line) <= 3 and next_line.isalpha()):
                categories = next_line.split()
                games.append({
                    'name': game_name,
                    'categories': categories
                })
                i += 1
            else:
                # –ò–≥—Ä–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                games.append({
                    'name': game_name,
                    'categories': []
                })
        else:
            games.append({
                'name': game_name,
                'categories': []
            })
    
    return games


def add_games_to_db(games_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î."""
    
    print("="*60)
    print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(games_data)} –∏–≥—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("="*60)
    print()
    
    created_games = 0
    created_categories = 0
    errors = []
    
    with transaction.atomic():
        for idx, game_data in enumerate(games_data, start=1):
            game_name = game_data['name']
            categories_list = game_data['categories']
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
                game, created = Game.objects.get_or_create(
                    name=game_name,
                    defaults={
                        'slug': slugify(game_name, allow_unicode=True),
                        'is_active': True,
                        'order': idx,
                        'icon': 'bi-controller'
                    }
                )
                
                if created:
                    created_games += 1
                    print(f"‚úÖ {idx}. {game_name}")
                else:
                    print(f"‚è≠Ô∏è  {idx}. {game_name} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for cat_idx, cat_name in enumerate(categories_list, start=1):
                    cat_slug = slugify(f"{game_name}-{cat_name}", allow_unicode=True)
                    cat_icon = get_icon_for_category(cat_name)
                    
                    category, cat_created = Category.objects.get_or_create(
                        game=game,
                        name=cat_name,
                        defaults={
                            'slug': cat_slug,
                            'icon': cat_icon,
                            'order': cat_idx,
                            'is_active': True
                        }
                    )
                    
                    if cat_created:
                        created_categories += 1
                        print(f"   ‚ûï {cat_name} ({cat_icon})")
                
                print()
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {game_name}: {e}"
                errors.append(error_msg)
                print(error_msg)
                print()
    
    print("="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*60)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {created_games}")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {created_categories}")
    if errors:
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
        for error in errors:
            print(f"   {error}")
    print("="*60)
    print()
    print(f"üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥: http://91.218.245.178/catalog/")
    print(f"‚öôÔ∏è  –ê–¥–º–∏–Ω–∫–∞: http://91.218.245.178/admin/listings/game/")
    print()


if __name__ == '__main__':
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫
    games = parse_games_list(GAMES_DATA)
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(games)} –∏–≥—Ä –≤ —Å–ø–∏—Å–∫–µ")
    print()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    add_games_to_db(games)

