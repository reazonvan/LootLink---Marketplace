#!/usr/bin/env python
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –í–°–ï–• –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –∏–≥—Ä (–ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è).
–û–ü–ê–°–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã!
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/auto_clear_all.py --listings | --games | --all
"""
import os
import sys
import django
import argparse

# Setup Django
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from listings.models import Game, Category, Listing
from django.db import transaction


def clear_listings():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    total = Listing.objects.count()
    
    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {total} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    
    with transaction.atomic():
        deleted = Listing.objects.all().delete()[0]
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {deleted}")
    return deleted


def clear_games():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏–≥—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    games_count = Game.objects.count()
    categories_count = Category.objects.count()
    listings_count = Listing.objects.count()
    
    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {games_count} –∏–≥—Ä, {categories_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, {listings_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    
    with transaction.atomic():
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (CASCADE)
        deleted = Game.objects.all().delete()
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ:")
    print(f"   ‚Ä¢ –ò–≥—Ä: {games_count}")
    print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
    print(f"   ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {listings_count}")
    return deleted


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ –ë–î')
    parser.add_argument('--listings', action='store_true', help='–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    parser.add_argument('--games', action='store_true', help='–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    parser.add_argument('--all', action='store_true', help='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ (—Ç–æ –∂–µ —á—Ç–æ --games)')
    
    args = parser.parse_args()
    
    print("="*60)
    print("‚ö†Ô∏è  –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î (–ë–ï–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø)")
    print("="*60)
    print()
    
    try:
        if args.listings:
            clear_listings()
        elif args.games or args.all:
            clear_games()
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø—Ü–∏—é:")
            print("   python scripts/auto_clear_all.py --listings")
            print("   python scripts/auto_clear_all.py --games")
            print("   python scripts/auto_clear_all.py --all")
            sys.exit(1)
        
        print()
        print("="*60)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("="*60)
    
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

