# Cursor AI Rules - Оптимизированные правила для максимальной эффективности

## Общие принципы работы

### Стиль коммуникации
- Всегда давать четкие, конкретные и исчерпывающие ответы
- Объяснять не только "как", но и "почему"
- Предлагать альтернативные решения, когда это уместно
- Использовать примеры кода для иллюстрации концепций
- Быть проактивным: предвидеть потенциальные проблемы и edge cases

### Работа с файлами
- **НЕ создавать документационные файлы (.md, README и т.д.)** без явного запроса
- Планы, описания, инструкции выводить в чат, а не в файлы
- Создавать файлы только для рабочего кода или по явной просьбе пользователя
- Экономить время и ресурсы пользователя

### Качество кода
- Писать чистый, читаемый и поддерживаемый код
- Следовать принципам SOLID, DRY, KISS
- Использовать осмысленные имена переменных и функций
- Добавлять комментарии для сложной логики
- Предпочитать явность неявности
- Избегать преждевременной оптимизации
- Всегда учитывать производительность и масштабируемость

## Специфичные правила по языкам

### Python
- Следовать PEP 8
- Использовать type hints для лучшей читаемости
- Предпочитать list/dict comprehensions где уместно
- Использовать context managers (with statement)
- Обрабатывать исключения явно
- Документировать функции и классы с помощью docstrings
- Использовать виртуальные окружения

### JavaScript/TypeScript
- Использовать современный ES6+ синтаксис
- Предпочитать const/let вместо var
- Использовать async/await вместо callbacks
- Строгая типизация в TypeScript
- Избегать any в TypeScript
- Использовать деструктуризацию
- Модульный подход (import/export)

### React
- Использовать функциональные компоненты и hooks
- Следовать принципу единственной ответственности
- Мемоизация для оптимизации (useMemo, useCallback)
- Правильно управлять зависимостями в useEffect
- Использовать PropTypes или TypeScript для props
- Избегать prop drilling (использовать Context или state management)

### Node.js
- Использовать async/await для асинхронных операций
- Правильная обработка ошибок
- Использовать environment variables (.env файлы)
- Логирование (не только console.log)
- Безопасность (валидация входных данных, защита от инъекций)

## Архитектура и паттерны

### Структура проекта
- Логичная организация файлов и папок
- Разделение concerns (MVC, MVVM и т.д.)
- Модульность и переиспользуемость
- Четкое разделение бизнес-логики и UI

### Паттерны проектирования
- Использовать подходящие паттерны (Factory, Singleton, Observer и т.д.)
- Repository pattern для работы с данными
- Dependency Injection для тестируемости
- Избегать anti-patterns (God Object, Spaghetti Code и т.д.)

## Безопасность

- Никогда не хранить секреты и credentials в коде
- Валидация всех пользовательских входных данных
- Защита от XSS, CSRF, SQL Injection
- Использовать HTTPS
- Регулярно обновлять зависимости
- Принцип наименьших привилегий

## Тестирование

- Писать unit тесты для критической логики
- Покрывать edge cases
- Использовать моки и стабы где необходимо
- Integration тесты для важных flow
- Тесты должны быть независимыми и изолированными
- Следовать AAA pattern (Arrange, Act, Assert)

## Git и Version Control

- Осмысленные commit messages
- Использовать conventional commits (feat:, fix:, docs: и т.д.)
- Маленькие, фокусированные commits
- Использовать branches для features
- Code review перед merge
- Не коммитить node_modules, .env файлы и т.д.

## Производительность

- Оптимизировать только после измерения (profiling)
- Использовать кэширование где уместно
- Lazy loading для больших данных
- Оптимизация запросов к БД (индексы, N+1 problem)
- Минимизация и сжатие ресурсов для фронтенда
- CDN для статических файлов

## Документация

- README с четкими инструкциями по установке и запуску
- Документировать API endpoints
- Комментарии для сложной бизнес-логики
- Changelog для отслеживания изменений
- Примеры использования

### Работа с Markdown файлами
- **НЕ создавать .md файлы** без явного запроса пользователя
- Планы, структуры, описания выводить прямо в чат
- Документацию и инструкции предоставлять в ответе, а не в файлах
- .md файлы создавать только если пользователь явно просит "создай файл" или "сохрани в файл"
- Это экономит время и ресурсы

## Error Handling и Logging

- Graceful error handling
- Информативные error messages
- Structured logging
- Разные уровни логирования (debug, info, warn, error)
- Stack traces для debugging
- Monitoring и alerting для production

## Accessibility (a11y)

- Семантичный HTML
- ARIA атрибуты где необходимо
- Keyboard navigation
- Screen reader support
- Правильный контраст цветов
- Alt текст для изображений

## Responsive Design

- Mobile-first подход
- Использовать относительные единицы (rem, em, %)
- Media queries для разных breakpoints
- Тестировать на разных устройствах
- Progressive enhancement

## Зависимости и библиотеки

- Использовать проверенные и активно поддерживаемые библиотеки
- Минимизировать количество зависимостей
- Проверять лицензии
- Регулярно обновлять для безопасности
- Понимать что делают используемые библиотеки

## Code Review подход

При анализе кода проверять:
- Корректность и логику
- Потенциальные баги
- Производительность
- Безопасность
- Читаемость
- Тестируемость
- Соответствие стандартам проекта

## Refactoring

- Рефакторить постепенно
- Не изменять поведение при рефакторинге
- Тесты должны проходить после рефакторинга
- Улучшать читаемость и поддерживаемость
- Устранять code smells
- Делать код более модульным

## AI-Assisted Development Best Practices

- Всегда проверять и понимать сгенерированный код
- Не доверять слепо - тестировать результаты
- Использовать AI для рутинных задач
- Просить объяснения непонятных решений
- Итеративно улучшать промпты для лучших результатов
- Комбинировать AI помощь с собственными знаниями

## Принципы работы с проектом

1. **Понимание контекста**: Сначала понять существующую кодовую базу
2. **Минимальные изменения**: Вносить минимально необходимые изменения
3. **Консистентность**: Следовать существующим паттернам в проекте
4. **Backwards compatibility**: Сохранять обратную совместимость где возможно
5. **Документирование изменений**: Объяснять почему были сделаны изменения

## Debugging стратегия

- Воспроизвести проблему
- Изолировать источник
- Понять причину
- Исправить
- Тестировать fix
- Документировать решение
- Добавить тесты чтобы предотвратить регрессию

## Оптимизация workflow

- Использовать горячие клавиши
- Автоматизировать повторяющиеся задачи
- Использовать snippets
- Настроить линтеры и форматтеры
- Pre-commit hooks для проверок
- CI/CD для автоматизации

## Приоритеты при разработке

1. **Корректность**: Код должен работать правильно
2. **Безопасность**: Защита от уязвимостей
3. **Читаемость**: Код должен быть понятным
4. **Поддерживаемость**: Легкость внесения изменений
5. **Производительность**: Оптимизация где критично
6. **Масштабируемость**: Готовность к росту

## Когда предлагать решения

- Предлагать несколько вариантов для сложных задач
- Объяснять trade-offs каждого подхода
- Рекомендовать лучшую практику с обоснованием
- Учитывать контекст проекта и требования
- Быть гибким и адаптивным к фидбеку

---

**Помни**: Цель - не просто написать код, который работает, но создать качественное, поддерживаемое и масштабируемое решение, которое будет приносить пользу долгое время.

