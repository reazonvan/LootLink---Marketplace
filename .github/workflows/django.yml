name: Django CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_lootlink_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linters
      run: |
        pip install flake8 black isort
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=migrations,venv,env
        # Check code formatting
        black --check . --exclude="migrations|venv|env" || true
        # Check imports ordering
        isort --check-only . --skip migrations --skip venv --skip env || true
    
    - name: Run migrations
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 'True'
        DB_NAME: test_lootlink_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        USE_S3: 'False'
      run: |
        python manage.py migrate
    
    - name: Run tests
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 'True'
        DB_NAME: test_lootlink_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        USE_S3: 'False'
      run: |
        python manage.py test --verbosity=2
    
    - name: Generate coverage report
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 'True'
        DB_NAME: test_lootlink_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        USE_S3: 'False'
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage report
        coverage html
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check --json || true
    
    - name: Notify on success
      if: success()
      run: echo "✅ All tests passed!"
    
    - name: Notify on failure
      if: failure()
      run: echo "❌ Tests failed!"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linters
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint
    
    - name: Run Flake8
      run: |
        flake8 . --count --max-line-length=120 --statistics --exclude=migrations,venv,env,__pycache__,.git
    
    - name: Check Black formatting
      run: |
        black --check . --exclude="migrations|venv|env"
    
    - name: Check import sorting
      run: |
        isort --check-only . --skip migrations --skip venv --skip env

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json -x ./venv,./env,./migrations || true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json
    
    - name: Check for known vulnerabilities
      run: |
        pip install safety
        safety check || true
